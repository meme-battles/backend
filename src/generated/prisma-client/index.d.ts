// Code generated by Prisma (prisma@1.31.1). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  meme: (where?: MemeWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  meme: (where: MemeWhereUniqueInput) => MemePromise;
  memes: (args?: {
    where?: MemeWhereInput;
    orderBy?: MemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Meme>;
  memesConnection: (args?: {
    where?: MemeWhereInput;
    orderBy?: MemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => MemeConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMeme: (data: MemeCreateInput) => MemePromise;
  updateMeme: (args: {
    data: MemeUpdateInput;
    where: MemeWhereUniqueInput;
  }) => MemePromise;
  updateManyMemes: (args: {
    data: MemeUpdateManyMutationInput;
    where?: MemeWhereInput;
  }) => BatchPayloadPromise;
  upsertMeme: (args: {
    where: MemeWhereUniqueInput;
    create: MemeCreateInput;
    update: MemeUpdateInput;
  }) => MemePromise;
  deleteMeme: (where: MemeWhereUniqueInput) => MemePromise;
  deleteManyMemes: (where?: MemeWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  meme: (
    where?: MemeSubscriptionWhereInput
  ) => MemeSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Role = "ADMIN" | "USER";

export type MemeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "imgLink_ASC"
  | "imgLink_DESC"
  | "cumulative_ASC"
  | "cumulative_DESC"
  | "votesUp_ASC"
  | "votesUp_DESC"
  | "vsBattleWins_ASC"
  | "vsBattleWins_DESC"
  | "vsBattleLoses_ASC"
  | "vsBattleLoses_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "name_ASC"
  | "name_DESC"
  | "password_ASC"
  | "password_DESC"
  | "email_ASC"
  | "email_DESC"
  | "role_ASC"
  | "role_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MemeUpdateInput {
  postedBy?: UserUpdateOneRequiredWithoutMemesInput;
  imgLink?: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export type MemeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MemeUpdateManyWithoutPostedByInput {
  create?: MemeCreateWithoutPostedByInput[] | MemeCreateWithoutPostedByInput;
  delete?: MemeWhereUniqueInput[] | MemeWhereUniqueInput;
  connect?: MemeWhereUniqueInput[] | MemeWhereUniqueInput;
  set?: MemeWhereUniqueInput[] | MemeWhereUniqueInput;
  disconnect?: MemeWhereUniqueInput[] | MemeWhereUniqueInput;
  update?:
    | MemeUpdateWithWhereUniqueWithoutPostedByInput[]
    | MemeUpdateWithWhereUniqueWithoutPostedByInput;
  upsert?:
    | MemeUpsertWithWhereUniqueWithoutPostedByInput[]
    | MemeUpsertWithWhereUniqueWithoutPostedByInput;
  deleteMany?: MemeScalarWhereInput[] | MemeScalarWhereInput;
  updateMany?:
    | MemeUpdateManyWithWhereNestedInput[]
    | MemeUpdateManyWithWhereNestedInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  name: String;
  password: String;
  email: String;
  role?: Role;
  memes?: MemeCreateManyWithoutPostedByInput;
}

export interface UserUpdateInput {
  name?: String;
  password?: String;
  email?: String;
  role?: Role;
  memes?: MemeUpdateManyWithoutPostedByInput;
}

export interface UserUpsertWithoutMemesInput {
  update: UserUpdateWithoutMemesDataInput;
  create: UserCreateWithoutMemesInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface UserUpdateManyMutationInput {
  name?: String;
  password?: String;
  email?: String;
  role?: Role;
}

export interface MemeCreateInput {
  id?: ID_Input;
  postedBy: UserCreateOneWithoutMemesInput;
  imgLink: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export interface MemeUpdateManyWithWhereNestedInput {
  where: MemeScalarWhereInput;
  data: MemeUpdateManyDataInput;
}

export interface UserCreateOneWithoutMemesInput {
  create?: UserCreateWithoutMemesInput;
  connect?: UserWhereUniqueInput;
}

export interface MemeUpsertWithWhereUniqueWithoutPostedByInput {
  where: MemeWhereUniqueInput;
  update: MemeUpdateWithoutPostedByDataInput;
  create: MemeCreateWithoutPostedByInput;
}

export interface UserCreateWithoutMemesInput {
  id?: ID_Input;
  name: String;
  password: String;
  email: String;
  role?: Role;
}

export interface MemeUpdateWithoutPostedByDataInput {
  imgLink?: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export interface MemeCreateWithoutPostedByInput {
  id?: ID_Input;
  imgLink: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  memes_every?: MemeWhereInput;
  memes_some?: MemeWhereInput;
  memes_none?: MemeWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface UserUpdateOneRequiredWithoutMemesInput {
  create?: UserCreateWithoutMemesInput;
  update?: UserUpdateWithoutMemesDataInput;
  upsert?: UserUpsertWithoutMemesInput;
  connect?: UserWhereUniqueInput;
}

export interface MemeUpdateManyDataInput {
  imgLink?: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export interface MemeCreateManyWithoutPostedByInput {
  create?: MemeCreateWithoutPostedByInput[] | MemeCreateWithoutPostedByInput;
  connect?: MemeWhereUniqueInput[] | MemeWhereUniqueInput;
}

export interface MemeUpdateManyMutationInput {
  imgLink?: String;
  cumulative?: Int;
  votesUp?: Int;
  vsBattleWins?: Int;
  vsBattleLoses?: Int;
}

export interface MemeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  postedBy?: UserWhereInput;
  imgLink?: String;
  imgLink_not?: String;
  imgLink_in?: String[] | String;
  imgLink_not_in?: String[] | String;
  imgLink_lt?: String;
  imgLink_lte?: String;
  imgLink_gt?: String;
  imgLink_gte?: String;
  imgLink_contains?: String;
  imgLink_not_contains?: String;
  imgLink_starts_with?: String;
  imgLink_not_starts_with?: String;
  imgLink_ends_with?: String;
  imgLink_not_ends_with?: String;
  cumulative?: Int;
  cumulative_not?: Int;
  cumulative_in?: Int[] | Int;
  cumulative_not_in?: Int[] | Int;
  cumulative_lt?: Int;
  cumulative_lte?: Int;
  cumulative_gt?: Int;
  cumulative_gte?: Int;
  votesUp?: Int;
  votesUp_not?: Int;
  votesUp_in?: Int[] | Int;
  votesUp_not_in?: Int[] | Int;
  votesUp_lt?: Int;
  votesUp_lte?: Int;
  votesUp_gt?: Int;
  votesUp_gte?: Int;
  vsBattleWins?: Int;
  vsBattleWins_not?: Int;
  vsBattleWins_in?: Int[] | Int;
  vsBattleWins_not_in?: Int[] | Int;
  vsBattleWins_lt?: Int;
  vsBattleWins_lte?: Int;
  vsBattleWins_gt?: Int;
  vsBattleWins_gte?: Int;
  vsBattleLoses?: Int;
  vsBattleLoses_not?: Int;
  vsBattleLoses_in?: Int[] | Int;
  vsBattleLoses_not_in?: Int[] | Int;
  vsBattleLoses_lt?: Int;
  vsBattleLoses_lte?: Int;
  vsBattleLoses_gt?: Int;
  vsBattleLoses_gte?: Int;
  AND?: MemeWhereInput[] | MemeWhereInput;
  OR?: MemeWhereInput[] | MemeWhereInput;
  NOT?: MemeWhereInput[] | MemeWhereInput;
}

export interface UserUpdateWithoutMemesDataInput {
  name?: String;
  password?: String;
  email?: String;
  role?: Role;
}

export interface MemeScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  updatedAt?: DateTimeInput;
  updatedAt_not?: DateTimeInput;
  updatedAt_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_not_in?: DateTimeInput[] | DateTimeInput;
  updatedAt_lt?: DateTimeInput;
  updatedAt_lte?: DateTimeInput;
  updatedAt_gt?: DateTimeInput;
  updatedAt_gte?: DateTimeInput;
  imgLink?: String;
  imgLink_not?: String;
  imgLink_in?: String[] | String;
  imgLink_not_in?: String[] | String;
  imgLink_lt?: String;
  imgLink_lte?: String;
  imgLink_gt?: String;
  imgLink_gte?: String;
  imgLink_contains?: String;
  imgLink_not_contains?: String;
  imgLink_starts_with?: String;
  imgLink_not_starts_with?: String;
  imgLink_ends_with?: String;
  imgLink_not_ends_with?: String;
  cumulative?: Int;
  cumulative_not?: Int;
  cumulative_in?: Int[] | Int;
  cumulative_not_in?: Int[] | Int;
  cumulative_lt?: Int;
  cumulative_lte?: Int;
  cumulative_gt?: Int;
  cumulative_gte?: Int;
  votesUp?: Int;
  votesUp_not?: Int;
  votesUp_in?: Int[] | Int;
  votesUp_not_in?: Int[] | Int;
  votesUp_lt?: Int;
  votesUp_lte?: Int;
  votesUp_gt?: Int;
  votesUp_gte?: Int;
  vsBattleWins?: Int;
  vsBattleWins_not?: Int;
  vsBattleWins_in?: Int[] | Int;
  vsBattleWins_not_in?: Int[] | Int;
  vsBattleWins_lt?: Int;
  vsBattleWins_lte?: Int;
  vsBattleWins_gt?: Int;
  vsBattleWins_gte?: Int;
  vsBattleLoses?: Int;
  vsBattleLoses_not?: Int;
  vsBattleLoses_in?: Int[] | Int;
  vsBattleLoses_not_in?: Int[] | Int;
  vsBattleLoses_lt?: Int;
  vsBattleLoses_lte?: Int;
  vsBattleLoses_gt?: Int;
  vsBattleLoses_gte?: Int;
  AND?: MemeScalarWhereInput[] | MemeScalarWhereInput;
  OR?: MemeScalarWhereInput[] | MemeScalarWhereInput;
  NOT?: MemeScalarWhereInput[] | MemeScalarWhereInput;
}

export interface MemeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MemeWhereInput;
  AND?: MemeSubscriptionWhereInput[] | MemeSubscriptionWhereInput;
  OR?: MemeSubscriptionWhereInput[] | MemeSubscriptionWhereInput;
  NOT?: MemeSubscriptionWhereInput[] | MemeSubscriptionWhereInput;
}

export interface MemeUpdateWithWhereUniqueWithoutPostedByInput {
  where: MemeWhereUniqueInput;
  data: MemeUpdateWithoutPostedByDataInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
}>;

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  password: String;
  email: String;
  role: Role;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
}

export interface MemeEdge {
  node: Meme;
  cursor: String;
}

export interface MemeEdgePromise extends Promise<MemeEdge>, Fragmentable {
  node: <T = MemePromise>() => T;
  cursor: () => Promise<String>;
}

export interface MemeEdgeSubscription
  extends Promise<AsyncIterator<MemeEdge>>,
    Fragmentable {
  node: <T = MemeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MemeSubscriptionPayload {
  mutation: MutationType;
  node: Meme;
  updatedFields: String[];
  previousValues: MemePreviousValues;
}

export interface MemeSubscriptionPayloadPromise
  extends Promise<MemeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MemePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MemePreviousValuesPromise>() => T;
}

export interface MemeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MemeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MemeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MemePreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Meme {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imgLink: String;
  cumulative: Int;
  votesUp: Int;
  vsBattleWins: Int;
  vsBattleLoses: Int;
}

export interface MemePromise extends Promise<Meme>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  postedBy: <T = UserPromise>() => T;
  imgLink: () => Promise<String>;
  cumulative: () => Promise<Int>;
  votesUp: () => Promise<Int>;
  vsBattleWins: () => Promise<Int>;
  vsBattleLoses: () => Promise<Int>;
}

export interface MemeSubscription
  extends Promise<AsyncIterator<Meme>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  postedBy: <T = UserSubscription>() => T;
  imgLink: () => Promise<AsyncIterator<String>>;
  cumulative: () => Promise<AsyncIterator<Int>>;
  votesUp: () => Promise<AsyncIterator<Int>>;
  vsBattleWins: () => Promise<AsyncIterator<Int>>;
  vsBattleLoses: () => Promise<AsyncIterator<Int>>;
}

export interface User {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  name: String;
  password: String;
  email: String;
  role: Role;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  name: () => Promise<String>;
  password: () => Promise<String>;
  email: () => Promise<String>;
  role: () => Promise<Role>;
  memes: <T = FragmentableArray<Meme>>(args?: {
    where?: MemeWhereInput;
    orderBy?: MemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  name: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  memes: <T = Promise<AsyncIterator<MemeSubscription>>>(args?: {
    where?: MemeWhereInput;
    orderBy?: MemeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface MemeConnection {
  pageInfo: PageInfo;
  edges: MemeEdge[];
}

export interface MemeConnectionPromise
  extends Promise<MemeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MemeEdge>>() => T;
  aggregate: <T = AggregateMemePromise>() => T;
}

export interface MemeConnectionSubscription
  extends Promise<AsyncIterator<MemeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MemeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMemeSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateMeme {
  count: Int;
}

export interface AggregateMemePromise
  extends Promise<AggregateMeme>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMemeSubscription
  extends Promise<AsyncIterator<AggregateMeme>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface MemePreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
  imgLink: String;
  cumulative: Int;
  votesUp: Int;
  vsBattleWins: Int;
  vsBattleLoses: Int;
}

export interface MemePreviousValuesPromise
  extends Promise<MemePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
  imgLink: () => Promise<String>;
  cumulative: () => Promise<Int>;
  votesUp: () => Promise<Int>;
  vsBattleWins: () => Promise<Int>;
  vsBattleLoses: () => Promise<Int>;
}

export interface MemePreviousValuesSubscription
  extends Promise<AsyncIterator<MemePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  imgLink: () => Promise<AsyncIterator<String>>;
  cumulative: () => Promise<AsyncIterator<Int>>;
  votesUp: () => Promise<AsyncIterator<Int>>;
  vsBattleWins: () => Promise<AsyncIterator<Int>>;
  vsBattleLoses: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Meme",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
